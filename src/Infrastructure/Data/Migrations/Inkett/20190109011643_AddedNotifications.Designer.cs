// <auto-generated />
using System;
using Inkett.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inkett.Infrastructure.Migrations.Inkett
{
    [DbContext(typeof(InkettContext))]
    [Migration("20190109011643_AddedNotifications")]
    partial class AddedNotifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlbumPictureUri")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int>("ProfileId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProfileId");

                    b.Property<int>("TattooId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TattooId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Follow", b =>
                {
                    b.Property<int>("ProfileId");

                    b.Property<int>("FollowedProfileId");

                    b.HasKey("ProfileId", "FollowedProfileId");

                    b.HasIndex("FollowedProfileId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Like", b =>
                {
                    b.Property<int>("TattooId");

                    b.Property<int>("ProfileId");

                    b.HasKey("TattooId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUri")
                        .IsRequired();

                    b.Property<bool>("IsChecked");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<int>("ProfileId");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .IsRequired();

                    b.Property<string>("CoverPicture")
                        .IsRequired();

                    b.Property<string>("ProfileDescription");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("ProfilePicture")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Tattoo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumId");

                    b.Property<string>("Description");

                    b.Property<int>("ProfileId");

                    b.Property<string>("TattooPictureUri")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Tattoos");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.TattooStyle", b =>
                {
                    b.Property<int>("StyleId");

                    b.Property<int>("TattooId");

                    b.HasKey("StyleId", "TattooId");

                    b.HasIndex("TattooId");

                    b.ToTable("TattooStyles");
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Album", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile")
                        .WithMany("Albums")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Comment", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inkett.ApplicationCore.Entitites.Tattoo", "Tattoo")
                        .WithMany("Comments")
                        .HasForeignKey("TattooId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Follow", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile", "FollowedProfile")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile", "Profile")
                        .WithMany("Follows")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Like", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile", "Profile")
                        .WithMany("Likes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inkett.ApplicationCore.Entitites.Tattoo", "Tattoo")
                        .WithMany("Likes")
                        .HasForeignKey("TattooId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Notification", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile", "Profile")
                        .WithMany("Notifications")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.Tattoo", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Album", "Album")
                        .WithMany("Tattoos")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Inkett.ApplicationCore.Entitites.Profile", "Profile")
                        .WithMany("Tattoos")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Inkett.ApplicationCore.Entitites.TattooStyle", b =>
                {
                    b.HasOne("Inkett.ApplicationCore.Entitites.Style", "Style")
                        .WithMany("TattooStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Inkett.ApplicationCore.Entitites.Tattoo", "Tattoo")
                        .WithMany("TattooStyles")
                        .HasForeignKey("TattooId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
